<section id="contacto" class="py-24 bg-gray-50">

    
    <!-- Sección de formulario - visible por defecto -->
    <div id="contactForm" class="mt-20 max-w-4xl mx-auto">
      <div class="text-center mb-12">
        <h2 class="heading-2 text-gray-900 mb-6">Contáctanos</h2>
        <p class="body-large text-gray-600 max-w-2xl mx-auto">
          ¿Tienes alguna pregunta o necesitas más información? Estamos aquí para ayudarte.
        </p>
      </div>
      
      <form id="contactFormElement" class="grid md:grid-cols-2 gap-6" action="/gracias" method="get">
        <div>
          <label for="nombre" class="block text-sm font-medium text-gray-700 mb-1">Nombre completo</label>
          <input 
            type="text" 
            id="nombre" 
            name="nombre" 
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary focus:outline-none transition-colors"
            placeholder="Tu nombre"
            required
            minlength="3"
          />
          <p class="error-message text-red-500 text-sm mt-1 hidden"></p>
        </div>
        
        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Correo electrónico</label>
          <input 
            type="email" 
            id="email" 
            name="email" 
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary focus:outline-none transition-colors"
            placeholder="tu@correo.com"
            required
            pattern="[^@\s]+@[^@\s]+\.[^@\s]+"
          />
          <p class="error-message text-red-500 text-sm mt-1 hidden"></p>
        </div>
        
        <div>
          <label for="empresa" class="block text-sm font-medium text-gray-700 mb-1">Empresa</label>
          <input 
            type="text" 
            id="empresa" 
            name="empresa" 
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary focus:outline-none transition-colors"
            placeholder="Nombre de tu empresa"
          />
        </div>
        
        <div>
          <label for="telefono" class="block text-sm font-medium text-gray-700 mb-1">Teléfono</label>
          <input 
            type="tel" 
            id="telefono" 
            name="telefono" 
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary focus:outline-none transition-colors"
            placeholder="+34 XXX XXX XXX"
            pattern="[\d\+\-\s\(\)]+"
          />
          <p class="error-message text-red-500 text-sm mt-1 hidden"></p>
        </div>
        
        <div class="md:col-span-2">
          <label for="mensaje" class="block text-sm font-medium text-gray-700 mb-1">¿Cómo podemos ayudarte?</label>
          <textarea 
            id="mensaje" 
            name="mensaje" 
            rows="4" 
            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary focus:outline-none transition-colors"
            placeholder="Cuéntanos más sobre tu equipo y necesidades..."
            required
            minlength="10"
          ></textarea>
          <p class="error-message text-red-500 text-sm mt-1 hidden"></p>
        </div>
        
        <div class="md:col-span-2 flex justify-center">
          <button type="submit" id="submitButton" class="btn btn-primary py-4 px-8 text-lg hover-lift">
            Enviar mensaje
          </button>
        </div>
      </form>
    </div>
  </div>
</section>

<script>
  // Animación al hacer scroll para el CTA
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-fade-in-up');
        observer.unobserve(entry.target);
      }
    });
  }, { threshold: 0.1 });

  // Observar el CTA y el formulario
  const ctaBox = document.querySelector('#contacto .bg-primary');
  const contactForm = document.querySelector('#contacto #contactForm');
  
  if (ctaBox && ctaBox instanceof HTMLElement) {
    ctaBox.classList.add('opacity-0');
    observer.observe(ctaBox);
  }
  
  if (contactForm && contactForm instanceof HTMLElement) {
    contactForm.classList.add('opacity-0');
    observer.observe(contactForm);
  }
  
  // Manejo del formulario y validación
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contactFormElement');
    const submitButton = document.getElementById('submitButton');
    
    if (form instanceof HTMLFormElement && submitButton instanceof HTMLButtonElement) {
      
      // Validar cada campo cuando pierda el foco
      const inputFields = form.querySelectorAll('input, textarea');
      inputFields.forEach(input => {
        if (input instanceof HTMLInputElement || input instanceof HTMLTextAreaElement) {
          input.addEventListener('blur', () => {
            validateField(input);
          });
          
          // También validar mientras escribe después de un error
          input.addEventListener('input', () => {
            if (input.classList.contains('border-red-500')) {
              validateField(input);
            }
          });
        }
      });
      
      // Manejar el envío del formulario
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        
        // Validar todos los campos antes de enviar
        let isValid = true;
        inputFields.forEach(input => {
          if (input instanceof HTMLInputElement || input instanceof HTMLTextAreaElement) {
            if (!validateField(input)) {
              isValid = false;
            }
          }
        });
        
        if (isValid) {
          // Cambiar estado del botón
          submitButton.disabled = true;
          submitButton.classList.add('opacity-70');
          submitButton.innerHTML = `
            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Enviando...
          `;
          
          // Simulando envío y redirección a la página de agradecimiento
          setTimeout(() => {
            // En una implementación real, aquí procesarías el formulario mediante AJAX
            // y luego redirigirías al usuario
            
            // Redirección a la página de agradecimiento
            window.location.href = '/gracias';
          }, 1500);
        }
      });
    }
    
    // Función para validar un campo individual
    function validateField(input: HTMLInputElement | HTMLTextAreaElement): boolean {
      const errorElement = input.nextElementSibling;
      let isValid = true;
      
      // Limpiar estado previo
      input.classList.remove('border-red-500');
      if (errorElement && errorElement.classList.contains('error-message')) {
        errorElement.classList.add('hidden');
        errorElement.textContent = '';
      }
      
      // Validar según el tipo
      if (input.required && !input.value.trim()) {
        setFieldError(input, errorElement, 'Este campo es obligatorio');
        isValid = false;
      } else if (input.minLength && input.value.length < input.minLength) {
        setFieldError(input, errorElement, `Debe tener al menos ${input.minLength} caracteres`);
        isValid = false;
      } else if (input.type === 'email' && !validateEmail(input.value)) {
        setFieldError(input, errorElement, 'Introduce un correo electrónico válido');
        isValid = false;
      } else if (input.type === 'tel' && input.value && !validatePhone(input.value)) {
        setFieldError(input, errorElement, 'Introduce un número de teléfono válido');
        isValid = false;
      }
      
      return isValid;
    }
    
    // Función para establecer un error en un campo
    function setFieldError(input: HTMLInputElement | HTMLTextAreaElement, errorElement: Element | null, message: string): void {
      input.classList.add('border-red-500');
      if (errorElement && errorElement.classList.contains('error-message')) {
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
      }
    }
    
    // Validación de correo electrónico
    function validateEmail(email: string): boolean {
      const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return re.test(email.toLowerCase());
    }
    
    // Validación de teléfono básica
    function validatePhone(phone: string): boolean {
      const re = /^[\d\+\-\s\(\)]{6,}$/;
      return re.test(phone);
    }
  });
</script>

<style>
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  #thankYouSection {
    animation: fadeIn 0.5s ease-out forwards;
  }
</style> 